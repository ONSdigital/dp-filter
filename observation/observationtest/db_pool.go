// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package observationtest

import (
	"github.com/ONSdigital/golang-neo4j-bolt-driver"
	"sync"
)

var (
	lockDBPoolMockOpenPool sync.RWMutex
)

// DBPoolMock is a mock implementation of DBPool.
//
//     func TestSomethingThatUsesDBPool(t *testing.T) {
//
//         // make and configure a mocked DBPool
//         mockedDBPool := &DBPoolMock{
//             OpenPoolFunc: func() (golangNeo4jBoltDriver.Conn, error) {
// 	               panic("TODO: mock out the OpenPool method")
//             },
//         }
//
//         // TODO: use mockedDBPool in code that requires DBPool
//         //       and then make assertions.
//
//     }
type DBPoolMock struct {
	// OpenPoolFunc mocks the OpenPool method.
	OpenPoolFunc func() (golangNeo4jBoltDriver.Conn, error)

	// calls tracks calls to the methods.
	calls struct {
		// OpenPool holds details about calls to the OpenPool method.
		OpenPool []struct {
		}
	}
}

// OpenPool calls OpenPoolFunc.
func (mock *DBPoolMock) OpenPool() (golangNeo4jBoltDriver.Conn, error) {
	if mock.OpenPoolFunc == nil {
		panic("moq: DBPoolMock.OpenPoolFunc is nil but DBPool.OpenPool was just called")
	}
	callInfo := struct {
	}{}
	lockDBPoolMockOpenPool.Lock()
	mock.calls.OpenPool = append(mock.calls.OpenPool, callInfo)
	lockDBPoolMockOpenPool.Unlock()
	return mock.OpenPoolFunc()
}

// OpenPoolCalls gets all the calls that were made to OpenPool.
// Check the length with:
//     len(mockedDBPool.OpenPoolCalls())
func (mock *DBPoolMock) OpenPoolCalls() []struct {
} {
	var calls []struct {
	}
	lockDBPoolMockOpenPool.RLock()
	calls = mock.calls.OpenPool
	lockDBPoolMockOpenPool.RUnlock()
	return calls
}
