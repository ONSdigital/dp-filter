// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package observationtest

import (
	"sync"
)

var (
	lockDBConnectionMockClose sync.RWMutex
)

// DBConnectionMock is a mock implementation of DBConnection.
//
//     func TestSomethingThatUsesDBConnection(t *testing.T) {
//
//         // make and configure a mocked DBConnection
//         mockedDBConnection := &DBConnectionMock{
//             CloseFunc: func() error {
// 	               panic("TODO: mock out the Close method")
//             },
//         }
//
//         // TODO: use mockedDBConnection in code that requires DBConnection
//         //       and then make assertions.
//
//     }
type DBConnectionMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
	}
}

// Close calls CloseFunc.
func (mock *DBConnectionMock) Close() error {
	if mock.CloseFunc == nil {
		panic("moq: DBConnectionMock.CloseFunc is nil but DBConnection.Close was just called")
	}
	callInfo := struct {
	}{}
	lockDBConnectionMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockDBConnectionMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedDBConnection.CloseCalls())
func (mock *DBConnectionMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockDBConnectionMockClose.RLock()
	calls = mock.calls.Close
	lockDBConnectionMockClose.RUnlock()
	return calls
}
